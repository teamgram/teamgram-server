//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: session.tl.proto

package session

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                        TLConstructor = 0
	TLConstructor_CRC32_sessionClientEvent             TLConstructor = -243320993
	TLConstructor_CRC32_sessionClientData              TLConstructor = 1101139022
	TLConstructor_CRC32_httpSessionData                TLConstructor = -606579889
	TLConstructor_CRC32_session_queryAuthKey           TLConstructor = 1798174801
	TLConstructor_CRC32_session_setAuthKey             TLConstructor = 487672075
	TLConstructor_CRC32_session_createSession          TLConstructor = 1091351053
	TLConstructor_CRC32_session_sendDataToSession      TLConstructor = -2023019028
	TLConstructor_CRC32_session_sendHttpDataToSession  TLConstructor = -1142152274
	TLConstructor_CRC32_session_closeSession           TLConstructor = 393200211
	TLConstructor_CRC32_session_pushUpdatesData        TLConstructor = -1519069143
	TLConstructor_CRC32_session_pushSessionUpdatesData TLConstructor = 1173618080
	TLConstructor_CRC32_session_pushRpcResultData      TLConstructor = 1262947465
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		-243320993:  "CRC32_sessionClientEvent",
		1101139022:  "CRC32_sessionClientData",
		-606579889:  "CRC32_httpSessionData",
		1798174801:  "CRC32_session_queryAuthKey",
		487672075:   "CRC32_session_setAuthKey",
		1091351053:  "CRC32_session_createSession",
		-2023019028: "CRC32_session_sendDataToSession",
		-1142152274: "CRC32_session_sendHttpDataToSession",
		393200211:   "CRC32_session_closeSession",
		-1519069143: "CRC32_session_pushUpdatesData",
		1173618080:  "CRC32_session_pushSessionUpdatesData",
		1262947465:  "CRC32_session_pushRpcResultData",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                        0,
		"CRC32_sessionClientEvent":             -243320993,
		"CRC32_sessionClientData":              1101139022,
		"CRC32_httpSessionData":                -606579889,
		"CRC32_session_queryAuthKey":           1798174801,
		"CRC32_session_setAuthKey":             487672075,
		"CRC32_session_createSession":          1091351053,
		"CRC32_session_sendDataToSession":      -2023019028,
		"CRC32_session_sendHttpDataToSession":  -1142152274,
		"CRC32_session_closeSession":           393200211,
		"CRC32_session_pushUpdatesData":        -1519069143,
		"CRC32_session_pushSessionUpdatesData": 1173618080,
		"CRC32_session_pushRpcResultData":      1262947465,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_session_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_session_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{0}
}

// HttpSessionData <--
//   - TL_httpSessionData
type HttpSessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	Payload       []byte        `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *HttpSessionData) Reset() {
	*x = HttpSessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpSessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpSessionData) ProtoMessage() {}

func (x *HttpSessionData) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpSessionData.ProtoReflect.Descriptor instead.
func (*HttpSessionData) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{0}
}

func (x *HttpSessionData) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *HttpSessionData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *HttpSessionData) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TLHttpSessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *HttpSessionData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLHttpSessionData) Reset() {
	*x = TLHttpSessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLHttpSessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHttpSessionData) ProtoMessage() {}

func (x *TLHttpSessionData) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHttpSessionData.ProtoReflect.Descriptor instead.
func (*TLHttpSessionData) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLHttpSessionData) GetData2() *HttpSessionData {
	if x != nil {
		return x.Data2
	}
	return nil
}

// SessionClientData <--
//   - TL_sessionClientData
type SessionClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	ServerId      string        `protobuf:"bytes,3,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ConnType      int32         `protobuf:"varint,4,opt,name=conn_type,json=connType,proto3" json:"conn_type,omitempty"`
	AuthKeyId     int64         `protobuf:"varint,5,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	KeyType       int32         `protobuf:"varint,6,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	PermAuthKeyId int64         `protobuf:"varint,7,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	SessionId     int64         `protobuf:"varint,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ClientIp      string        `protobuf:"bytes,9,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	QuickAck      int32         `protobuf:"varint,10,opt,name=quick_ack,json=quickAck,proto3" json:"quick_ack,omitempty"`
	Salt          int64         `protobuf:"varint,11,opt,name=salt,proto3" json:"salt,omitempty"`
	Payload       []byte        `protobuf:"bytes,12,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SessionClientData) Reset() {
	*x = SessionClientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionClientData) ProtoMessage() {}

func (x *SessionClientData) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionClientData.ProtoReflect.Descriptor instead.
func (*SessionClientData) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{2}
}

func (x *SessionClientData) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *SessionClientData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *SessionClientData) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *SessionClientData) GetConnType() int32 {
	if x != nil {
		return x.ConnType
	}
	return 0
}

func (x *SessionClientData) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *SessionClientData) GetKeyType() int32 {
	if x != nil {
		return x.KeyType
	}
	return 0
}

func (x *SessionClientData) GetPermAuthKeyId() int64 {
	if x != nil {
		return x.PermAuthKeyId
	}
	return 0
}

func (x *SessionClientData) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SessionClientData) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *SessionClientData) GetQuickAck() int32 {
	if x != nil {
		return x.QuickAck
	}
	return 0
}

func (x *SessionClientData) GetSalt() int64 {
	if x != nil {
		return x.Salt
	}
	return 0
}

func (x *SessionClientData) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TLSessionClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *SessionClientData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLSessionClientData) Reset() {
	*x = TLSessionClientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionClientData) ProtoMessage() {}

func (x *TLSessionClientData) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionClientData.ProtoReflect.Descriptor instead.
func (*TLSessionClientData) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLSessionClientData) GetData2() *SessionClientData {
	if x != nil {
		return x.Data2
	}
	return nil
}

// SessionClientEvent <--
//   - TL_sessionClientEvent
type SessionClientEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	ServerId      string        `protobuf:"bytes,3,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ConnType      int32         `protobuf:"varint,4,opt,name=conn_type,json=connType,proto3" json:"conn_type,omitempty"`
	AuthKeyId     int64         `protobuf:"varint,5,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	KeyType       int32         `protobuf:"varint,6,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	PermAuthKeyId int64         `protobuf:"varint,7,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	SessionId     int64         `protobuf:"varint,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ClientIp      string        `protobuf:"bytes,9,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
}

func (x *SessionClientEvent) Reset() {
	*x = SessionClientEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionClientEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionClientEvent) ProtoMessage() {}

func (x *SessionClientEvent) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionClientEvent.ProtoReflect.Descriptor instead.
func (*SessionClientEvent) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{4}
}

func (x *SessionClientEvent) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *SessionClientEvent) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *SessionClientEvent) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *SessionClientEvent) GetConnType() int32 {
	if x != nil {
		return x.ConnType
	}
	return 0
}

func (x *SessionClientEvent) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *SessionClientEvent) GetKeyType() int32 {
	if x != nil {
		return x.KeyType
	}
	return 0
}

func (x *SessionClientEvent) GetPermAuthKeyId() int64 {
	if x != nil {
		return x.PermAuthKeyId
	}
	return 0
}

func (x *SessionClientEvent) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SessionClientEvent) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

type TLSessionClientEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *SessionClientEvent `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLSessionClientEvent) Reset() {
	*x = TLSessionClientEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionClientEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionClientEvent) ProtoMessage() {}

func (x *TLSessionClientEvent) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionClientEvent.ProtoReflect.Descriptor instead.
func (*TLSessionClientEvent) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLSessionClientEvent) GetData2() *SessionClientEvent {
	if x != nil {
		return x.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLSessionQueryAuthKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLSessionQueryAuthKey) Reset() {
	*x = TLSessionQueryAuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionQueryAuthKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionQueryAuthKey) ProtoMessage() {}

func (x *TLSessionQueryAuthKey) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionQueryAuthKey.ProtoReflect.Descriptor instead.
func (*TLSessionQueryAuthKey) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{6}
}

func (x *TLSessionQueryAuthKey) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSessionQueryAuthKey) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLSessionSetAuthKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor        `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	AuthKey     *mtproto.AuthKeyInfo `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	FutureSalt  *mtproto.FutureSalt  `protobuf:"bytes,4,opt,name=future_salt,json=futureSalt,proto3" json:"future_salt,omitempty"`
	ExpiresIn   int32                `protobuf:"varint,5,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (x *TLSessionSetAuthKey) Reset() {
	*x = TLSessionSetAuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionSetAuthKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionSetAuthKey) ProtoMessage() {}

func (x *TLSessionSetAuthKey) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionSetAuthKey.ProtoReflect.Descriptor instead.
func (*TLSessionSetAuthKey) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLSessionSetAuthKey) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSessionSetAuthKey) GetAuthKey() *mtproto.AuthKeyInfo {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *TLSessionSetAuthKey) GetFutureSalt() *mtproto.FutureSalt {
	if x != nil {
		return x.FutureSalt
	}
	return nil
}

func (x *TLSessionSetAuthKey) GetExpiresIn() int32 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLSessionCreateSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	Client      *SessionClientEvent `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *TLSessionCreateSession) Reset() {
	*x = TLSessionCreateSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionCreateSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionCreateSession) ProtoMessage() {}

func (x *TLSessionCreateSession) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionCreateSession.ProtoReflect.Descriptor instead.
func (*TLSessionCreateSession) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{8}
}

func (x *TLSessionCreateSession) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSessionCreateSession) GetClient() *SessionClientEvent {
	if x != nil {
		return x.Client
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLSessionSendDataToSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	Data        *SessionClientData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TLSessionSendDataToSession) Reset() {
	*x = TLSessionSendDataToSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionSendDataToSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionSendDataToSession) ProtoMessage() {}

func (x *TLSessionSendDataToSession) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionSendDataToSession.ProtoReflect.Descriptor instead.
func (*TLSessionSendDataToSession) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLSessionSendDataToSession) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSessionSendDataToSession) GetData() *SessionClientData {
	if x != nil {
		return x.Data
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLSessionSendHttpDataToSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	Client      *SessionClientData `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *TLSessionSendHttpDataToSession) Reset() {
	*x = TLSessionSendHttpDataToSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionSendHttpDataToSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionSendHttpDataToSession) ProtoMessage() {}

func (x *TLSessionSendHttpDataToSession) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionSendHttpDataToSession.ProtoReflect.Descriptor instead.
func (*TLSessionSendHttpDataToSession) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLSessionSendHttpDataToSession) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSessionSendHttpDataToSession) GetClient() *SessionClientData {
	if x != nil {
		return x.Client
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLSessionCloseSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	Client      *SessionClientEvent `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *TLSessionCloseSession) Reset() {
	*x = TLSessionCloseSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionCloseSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionCloseSession) ProtoMessage() {}

func (x *TLSessionCloseSession) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionCloseSession.ProtoReflect.Descriptor instead.
func (*TLSessionCloseSession) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLSessionCloseSession) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSessionCloseSession) GetClient() *SessionClientEvent {
	if x != nil {
		return x.Client
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLSessionPushUpdatesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor   TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	PermAuthKeyId int64            `protobuf:"varint,3,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	Notification  bool             `protobuf:"varint,4,opt,name=notification,proto3" json:"notification,omitempty"`
	Updates       *mtproto.Updates `protobuf:"bytes,5,opt,name=updates,proto3" json:"updates,omitempty"`
}

func (x *TLSessionPushUpdatesData) Reset() {
	*x = TLSessionPushUpdatesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionPushUpdatesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionPushUpdatesData) ProtoMessage() {}

func (x *TLSessionPushUpdatesData) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionPushUpdatesData.ProtoReflect.Descriptor instead.
func (*TLSessionPushUpdatesData) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLSessionPushUpdatesData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSessionPushUpdatesData) GetPermAuthKeyId() int64 {
	if x != nil {
		return x.PermAuthKeyId
	}
	return 0
}

func (x *TLSessionPushUpdatesData) GetNotification() bool {
	if x != nil {
		return x.Notification
	}
	return false
}

func (x *TLSessionPushUpdatesData) GetUpdates() *mtproto.Updates {
	if x != nil {
		return x.Updates
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLSessionPushSessionUpdatesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor   TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	PermAuthKeyId int64            `protobuf:"varint,3,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	AuthKeyId     int64            `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId     int64            `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Updates       *mtproto.Updates `protobuf:"bytes,6,opt,name=updates,proto3" json:"updates,omitempty"`
}

func (x *TLSessionPushSessionUpdatesData) Reset() {
	*x = TLSessionPushSessionUpdatesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionPushSessionUpdatesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionPushSessionUpdatesData) ProtoMessage() {}

func (x *TLSessionPushSessionUpdatesData) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionPushSessionUpdatesData.ProtoReflect.Descriptor instead.
func (*TLSessionPushSessionUpdatesData) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLSessionPushSessionUpdatesData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSessionPushSessionUpdatesData) GetPermAuthKeyId() int64 {
	if x != nil {
		return x.PermAuthKeyId
	}
	return 0
}

func (x *TLSessionPushSessionUpdatesData) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLSessionPushSessionUpdatesData) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *TLSessionPushSessionUpdatesData) GetUpdates() *mtproto.Updates {
	if x != nil {
		return x.Updates
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLSessionPushRpcResultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor    TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	PermAuthKeyId  int64         `protobuf:"varint,3,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	AuthKeyId      int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId      int64         `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ClientReqMsgId int64         `protobuf:"varint,6,opt,name=client_req_msg_id,json=clientReqMsgId,proto3" json:"client_req_msg_id,omitempty"`
	RpcResultData  []byte        `protobuf:"bytes,7,opt,name=rpc_result_data,json=rpcResultData,proto3" json:"rpc_result_data,omitempty"`
}

func (x *TLSessionPushRpcResultData) Reset() {
	*x = TLSessionPushRpcResultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionPushRpcResultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionPushRpcResultData) ProtoMessage() {}

func (x *TLSessionPushRpcResultData) ProtoReflect() protoreflect.Message {
	mi := &file_session_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionPushRpcResultData.ProtoReflect.Descriptor instead.
func (*TLSessionPushRpcResultData) Descriptor() ([]byte, []int) {
	return file_session_tl_proto_rawDescGZIP(), []int{14}
}

func (x *TLSessionPushRpcResultData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSessionPushRpcResultData) GetPermAuthKeyId() int64 {
	if x != nil {
		return x.PermAuthKeyId
	}
	return 0
}

func (x *TLSessionPushRpcResultData) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLSessionPushRpcResultData) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *TLSessionPushRpcResultData) GetClientReqMsgId() int64 {
	if x != nil {
		return x.ClientReqMsgId
	}
	return 0
}

func (x *TLSessionPushRpcResultData) GetRpcResultData() []byte {
	if x != nil {
		return x.RpcResultData
	}
	return nil
}

var File_session_tl_proto protoreflect.FileDescriptor

var file_session_tl_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x74, 0x6c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x48, 0x74, 0x74,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x99, 0x03,
	0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x70, 0x65, 0x72,
	0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x61, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x48, 0x0a, 0x14, 0x54, 0x4c, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x22, 0xcf, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d,
	0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x22, 0x4a, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x22, 0x73, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x0a, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x22, 0x89, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a,
	0x1c, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x48, 0x74, 0x74, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x54,
	0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x33, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27,
	0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x41, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x1c,
	0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x52,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x70, 0x63,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2a, 0x80, 0x04, 0x0a, 0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0xdf, 0xee, 0xfc, 0x8b, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a,
	0x17, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0xce, 0x98, 0x88, 0x8d, 0x04, 0x12, 0x22,
	0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x10, 0xcf, 0xa6, 0xe1, 0xde, 0xfd, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x22, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x10, 0xd1, 0xf0, 0xb7, 0xd9, 0x06, 0x12, 0x20, 0x0a, 0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x10, 0x8b, 0x92, 0xc5, 0xe8, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x8d, 0xe4, 0xb2, 0x88, 0x04, 0x12, 0x2c, 0x0a,
	0x1f, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x10, 0xec, 0xdb, 0xac, 0xbb, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x30, 0x0a, 0x23, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x48, 0x74, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0xae, 0xc7, 0xb0, 0xdf, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a,
	0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xd3, 0x84, 0xbf, 0xbb,
	0x01, 0x12, 0x2a, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x10, 0xa9, 0xb0, 0xd3, 0xab, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a,
	0x24, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x10, 0xa0, 0xfb, 0xcf, 0xaf, 0x04, 0x12, 0x27, 0x0a, 0x1f, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x89,
	0x99, 0x9c, 0xda, 0x04, 0x32, 0xff, 0x05, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x1a, 0x14, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x15,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x19, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x1d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x48, 0x74,
	0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x48, 0x74, 0x74, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x19, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x74, 0x65,
	0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_session_tl_proto_rawDescOnce sync.Once
	file_session_tl_proto_rawDescData = file_session_tl_proto_rawDesc
)

func file_session_tl_proto_rawDescGZIP() []byte {
	file_session_tl_proto_rawDescOnce.Do(func() {
		file_session_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_session_tl_proto_rawDescData)
	})
	return file_session_tl_proto_rawDescData
}

var file_session_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_session_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_session_tl_proto_goTypes = []interface{}{
	(TLConstructor)(0),                      // 0: session.TLConstructor
	(*HttpSessionData)(nil),                 // 1: session.HttpSessionData
	(*TLHttpSessionData)(nil),               // 2: session.TL_httpSessionData
	(*SessionClientData)(nil),               // 3: session.SessionClientData
	(*TLSessionClientData)(nil),             // 4: session.TL_sessionClientData
	(*SessionClientEvent)(nil),              // 5: session.SessionClientEvent
	(*TLSessionClientEvent)(nil),            // 6: session.TL_sessionClientEvent
	(*TLSessionQueryAuthKey)(nil),           // 7: session.TL_session_queryAuthKey
	(*TLSessionSetAuthKey)(nil),             // 8: session.TL_session_setAuthKey
	(*TLSessionCreateSession)(nil),          // 9: session.TL_session_createSession
	(*TLSessionSendDataToSession)(nil),      // 10: session.TL_session_sendDataToSession
	(*TLSessionSendHttpDataToSession)(nil),  // 11: session.TL_session_sendHttpDataToSession
	(*TLSessionCloseSession)(nil),           // 12: session.TL_session_closeSession
	(*TLSessionPushUpdatesData)(nil),        // 13: session.TL_session_pushUpdatesData
	(*TLSessionPushSessionUpdatesData)(nil), // 14: session.TL_session_pushSessionUpdatesData
	(*TLSessionPushRpcResultData)(nil),      // 15: session.TL_session_pushRpcResultData
	(*mtproto.AuthKeyInfo)(nil),             // 16: mtproto.AuthKeyInfo
	(*mtproto.FutureSalt)(nil),              // 17: mtproto.FutureSalt
	(*mtproto.Updates)(nil),                 // 18: mtproto.Updates
	(*mtproto.Bool)(nil),                    // 19: mtproto.Bool
}
var file_session_tl_proto_depIdxs = []int32{
	0,  // 0: session.HttpSessionData.constructor:type_name -> session.TLConstructor
	1,  // 1: session.TL_httpSessionData.data2:type_name -> session.HttpSessionData
	0,  // 2: session.SessionClientData.constructor:type_name -> session.TLConstructor
	3,  // 3: session.TL_sessionClientData.data2:type_name -> session.SessionClientData
	0,  // 4: session.SessionClientEvent.constructor:type_name -> session.TLConstructor
	5,  // 5: session.TL_sessionClientEvent.data2:type_name -> session.SessionClientEvent
	0,  // 6: session.TL_session_queryAuthKey.constructor:type_name -> session.TLConstructor
	0,  // 7: session.TL_session_setAuthKey.constructor:type_name -> session.TLConstructor
	16, // 8: session.TL_session_setAuthKey.auth_key:type_name -> mtproto.AuthKeyInfo
	17, // 9: session.TL_session_setAuthKey.future_salt:type_name -> mtproto.FutureSalt
	0,  // 10: session.TL_session_createSession.constructor:type_name -> session.TLConstructor
	5,  // 11: session.TL_session_createSession.client:type_name -> session.SessionClientEvent
	0,  // 12: session.TL_session_sendDataToSession.constructor:type_name -> session.TLConstructor
	3,  // 13: session.TL_session_sendDataToSession.data:type_name -> session.SessionClientData
	0,  // 14: session.TL_session_sendHttpDataToSession.constructor:type_name -> session.TLConstructor
	3,  // 15: session.TL_session_sendHttpDataToSession.client:type_name -> session.SessionClientData
	0,  // 16: session.TL_session_closeSession.constructor:type_name -> session.TLConstructor
	5,  // 17: session.TL_session_closeSession.client:type_name -> session.SessionClientEvent
	0,  // 18: session.TL_session_pushUpdatesData.constructor:type_name -> session.TLConstructor
	18, // 19: session.TL_session_pushUpdatesData.updates:type_name -> mtproto.Updates
	0,  // 20: session.TL_session_pushSessionUpdatesData.constructor:type_name -> session.TLConstructor
	18, // 21: session.TL_session_pushSessionUpdatesData.updates:type_name -> mtproto.Updates
	0,  // 22: session.TL_session_pushRpcResultData.constructor:type_name -> session.TLConstructor
	7,  // 23: session.RPCSession.session_queryAuthKey:input_type -> session.TL_session_queryAuthKey
	8,  // 24: session.RPCSession.session_setAuthKey:input_type -> session.TL_session_setAuthKey
	9,  // 25: session.RPCSession.session_createSession:input_type -> session.TL_session_createSession
	10, // 26: session.RPCSession.session_sendDataToSession:input_type -> session.TL_session_sendDataToSession
	11, // 27: session.RPCSession.session_sendHttpDataToSession:input_type -> session.TL_session_sendHttpDataToSession
	12, // 28: session.RPCSession.session_closeSession:input_type -> session.TL_session_closeSession
	13, // 29: session.RPCSession.session_pushUpdatesData:input_type -> session.TL_session_pushUpdatesData
	14, // 30: session.RPCSession.session_pushSessionUpdatesData:input_type -> session.TL_session_pushSessionUpdatesData
	15, // 31: session.RPCSession.session_pushRpcResultData:input_type -> session.TL_session_pushRpcResultData
	16, // 32: session.RPCSession.session_queryAuthKey:output_type -> mtproto.AuthKeyInfo
	19, // 33: session.RPCSession.session_setAuthKey:output_type -> mtproto.Bool
	19, // 34: session.RPCSession.session_createSession:output_type -> mtproto.Bool
	19, // 35: session.RPCSession.session_sendDataToSession:output_type -> mtproto.Bool
	1,  // 36: session.RPCSession.session_sendHttpDataToSession:output_type -> session.HttpSessionData
	19, // 37: session.RPCSession.session_closeSession:output_type -> mtproto.Bool
	19, // 38: session.RPCSession.session_pushUpdatesData:output_type -> mtproto.Bool
	19, // 39: session.RPCSession.session_pushSessionUpdatesData:output_type -> mtproto.Bool
	19, // 40: session.RPCSession.session_pushRpcResultData:output_type -> mtproto.Bool
	32, // [32:41] is the sub-list for method output_type
	23, // [23:32] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_session_tl_proto_init() }
func file_session_tl_proto_init() {
	if File_session_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_session_tl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpSessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLHttpSessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionClientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionClientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionClientEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionClientEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionQueryAuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionSetAuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionCreateSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionSendDataToSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionSendHttpDataToSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionCloseSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionPushUpdatesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionPushSessionUpdatesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_tl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionPushRpcResultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_session_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_session_tl_proto_goTypes,
		DependencyIndexes: file_session_tl_proto_depIdxs,
		EnumInfos:         file_session_tl_proto_enumTypes,
		MessageInfos:      file_session_tl_proto_msgTypes,
	}.Build()
	File_session_tl_proto = out.File
	file_session_tl_proto_rawDesc = nil
	file_session_tl_proto_goTypes = nil
	file_session_tl_proto_depIdxs = nil
}
